// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id            String       @id
//   email         String    @unique
//   name          String?
//   emailVerified Boolean
//   image         String?
//   createdAt     DateTime
//   updatedAt     DateTime
//   sessions      Session[]
//   accounts      Account[]

//   @@map("user")
// }
model User {
  id            String    @id
  email         String    @unique
  name          String?
  emailVerified Boolean
  image         String?
  role          String?    // "admin" or "user"
  schoolId      String?   // Foreign key to the school (nullable for admins)
  school        School?   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}
model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  slug String @unique
  content   String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model School {
  id          String    @id @default(uuid())
  name        String
  address     String?
  city        String?
  state       String?
  country     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  students    Student[] // Relationship to students
  users       User[]    // Relationship to users (school reps)

  @@map("school")
}
model Student {
  id          String    @id @default(uuid())
  firstName   String
  lastName    String
  dateOfBirth DateTime?
  gender      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  schoolId    String    // Foreign key to the school the student belongs to
  school      School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@map("student")
}